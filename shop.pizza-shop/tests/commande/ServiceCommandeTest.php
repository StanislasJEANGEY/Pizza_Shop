<?php

namespace pizzashop\shop\tests\commande;

require_once __DIR__ . '/../../vendor/autoload.php';

//use Faker\Factory;
use PHPUnit\Framework\Attributes\DataProvider;
use pizzashop\shop\domain\entities\commande\Commande;
use pizzashop\shop\domain\entities\commande\Item;
use Illuminate\Database\Capsule\Manager as DB;
use pizzashop\shop\domain\service\CatalogueService as CatalogueService;
use pizzashop\shop\domain\service\CommandeService as CommandeService;
use pizzashop\shop\domain\dto\commande\CommandeDTO as CommandeDTO;
use pizzashop\shop\Exception\ServiceCommandeNotFoundException as ServiceCommandeNotFoundException;

class ServiceCommandeTest extends \PHPUnit\Framework\TestCase {

    private static $commandeIds = [];
    private static $itemIds = [];
    private static $serviceProduits;
    private static $serviceCommande;
    private static $faker;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass();
        $dbcom = __DIR__ . '/../../config/commande.db.ini';
        $dbcat = __DIR__ . '/../../config/catalog.db.ini';
        $db = new DB();
        $db->addConnection(parse_ini_file($dbcom), 'commande');
        $db->addConnection(parse_ini_file($dbcat), 'catalog');
        $db->setAsGlobal();
        $db->bootEloquent();

        self::$serviceProduits = new CatalogueService();
        self::$serviceCommande = new CommandeService(self::$serviceProduits);
//      self::$faker = Factory::create('fr_FR');
        self::fill();

    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        self::cleanDB();
    }


    private static function cleanDB(){
        foreach (self::$commandeIds as $id){
            Commande::find($id)->delete();
        }
        foreach (self::$itemIds as $id){
            Item::find($id)->delete();
        }
    }
    private static function fill() {

   	 	// TODO : créer une commande dans la base pour tester l'accès à une commande
    }


//    public function testAccederCommande(){
//        //$id = self::$commandeIds[0];
//        foreach (self::$commandeIds as $id){
//            $commandeEntity = Commande::find($id);
//            $commandeDTO = self::$serviceCommande->accederCommande($id);
//            $this->assertNotNull($commandeDTO);
//
//            // TODO : comparer les données de l'entité et du DTO
//        }
//    }


    public function testAccederCommande()
    {
        // Créez une commande fictive pour tester l'accès
        $commande = new Commande();
        $commande->id = '112e7ee1-3e8d-37d6-89cf-be3318ad6368';
        $commande->date_commande = '2023-05-17 01:46:37';
        $commande->type_livraison = 3;
        $commande->delai = 0;
        $commande->etat = 1;
        $commande->montant_commande = 61.91;
        $commande->mail_client = 'ThéodoreLeger@sfr.fr';

        $catalogueService = new CatalogueService();
        try {
            // Appelez la méthode accederCommande pour obtenir le DTO
            $commandeDTO = self::$serviceCommande->accederCommande('112e7ee1-3e8d-37d6-89cf-be3318ad6368', $catalogueService);

            // Vérifiez si le DTO a été créé correctement
            $this->assertInstanceOf(CommandeDTO::class, $commandeDTO);
            $this->assertEquals($commande->id, $commandeDTO->getIdCommande());
            $this->assertEquals($commande->date_commande, $commandeDTO->getDateCommande());
            $this->assertEquals($commande->type_livraison, $commandeDTO->getTypeLivraison());
            $this->assertEquals($commande->delai, $commandeDTO->getDelaiCommande());
            $this->assertEquals($commande->etat, $commandeDTO->getEtatCommande());
            $this->assertEquals($commande->montant_commande, $commandeDTO->getMontantCommande());
            $this->assertEquals($commande->mail_client, $commandeDTO->getMailClient());

        } catch (ServiceCommandeNotFoundException $e) {
            // Si une exception est lancée, le test échouera
            $this->fail("ServiceCommandeNotFoundException ne devrait pas être levée ici.");
        }
    }
}